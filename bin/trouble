#!/usr/bin/env bash

# nice script boilerplate from https://betterdev.blog/minimal-safe-bash-script-template/
set -Eeuo pipefail

tempfile=$(mktemp background.XXX)
trap cleanup SIGINT SIGTERM ERR EXIT

# shellcheck disable=SC2034  # Unused variable left for future convenience
script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  rm -rf "${tempfile}"
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    # shellcheck disable=SC2034  # Unused variables left on purpose
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

# red='\033[0;31m'
# yellow='\033[0;33m'
# clear='\033[0m'

bold=$(tput bold)
underline=$(tput sgr 0 1)
reset=$(tput sgr0)

purple=$(tput setaf 171)
red=$(tput setaf 1)
green=$(tput setaf 76)
tan=$(tput setaf 3)
blue=$(tput setaf 38)

msg() {
  echo >&2 -e "${1-}"
}

define(){ IFS=$'\n' read -r -d '' "${1}" || true; }

#
# Headers and  Logging
#

e_header() { printf "\n${bold}${purple}==========  %s  ==========${reset}\n" "$@" 
}
e_arrow() { printf "➜ $@\n"
}
e_success() { printf "${green}✔ %s${reset}\n" "$@"
}
echo 
e_error() { printf "${red}✖ %s${reset}\n" "$@" 1>&2
}
e_warning() { printf "${tan}➜ %s${reset}\n" "$@" 1>&2
}
e_underline() { printf "${underline}${bold}%s${reset}\n" "$@"
}
e_bold() { printf "${bold}%s${reset}\n" "$@"
}
e_note() { printf "${underline}${bold}${blue}Note:${reset}  ${blue}%s${reset}\n" "$@"
}

function usage() {
  e_bold "$USAGE"
  e_note "$DESCRIPTION"
}

define MESSAGE<<EOF
|                   ${bold}${red}Event${reset}                   |   ${bold}${red}Latency${reset}  |     ${bold}${red}Scaled${reset}     |
|-------------------------------------------|------------|----------------|
| 1 CPU cycle                               |  0.3 ns    |  1 s           |
| Level 1 cache access                      |  0.9 ns    |  3 s           |
| Level 2 cache access                      |  3 ns      |  10 s          |
| Level 3 cache access                      |  10 ns     |  33 s          |
| Main memory access (DRAM from CPU)        |  100 ns    |  6 min         |
| Solid-state disk I/O (flash memory)       |  10–100 μs |  9–90 hours    |
| Rotational disk I/O                       |  1–10 ms   |  1–12 months   |
| Internet: San Francisco to New York       |  40 ms     |  4 years       |
| Internet: San Francisco to United Kingdom |  81 ms     |  8 years       |
| Lightweight hardware virtualization boot  |  100 ms    |  11 years      |
| Internet: San Francisco to Australia      |  183 ms    |  19 years      |
| OS virtualization system boot             |  < 1 s     |  105 years     |
| TCP timer-based retransmit                |  1–3 s     |  105–317 years |
| SCSI command time-out                     |  30 s      |  3 millennia   |
| Hardware (HW) virtualization system boot  |  40 s      |  4 millennia   |
| Physical system reboot                    |  5 m       |  32 millennia  |
\n
    Notes on quickly orienting on a sick linux system
      from Brendan Gregg ${underline}Systems Performance, 2nd Ed${reset}

1.  ${bold}${green}uptime${reset} check load averages to identify if load is 
    increasing or decreasing (compare 1-, 5-, 15-minute averages). See section 6.6.1
2.  ${bold}${green}dmesg -T | tail${reset} Check kernel errors including OOM events.
3.  ${bold}${green}vmstat -SM 1${reset} System-wide statistics: run queue length,
    swapping, overall CPU usage
4.  ${bold}${green}mpstat -P ALL 1${reset} Per-CPU balance: a single busy CPU
    can indicate poor thread scaling
5.  ${bold}${green}pidstat 1${reset} Per-process CPU usage: identify unexpected
    CPU consumers, and user/system CPU time for each process
6.  ${bold}${green}iostat -sxz${reset} Disk I/O statistics: IOPS and throughput,
    average wait time, percent busy.
7.  ${bold}${green}free -mh${reset} Memory usage including the file system cache.
8.  ${bold}${green}sar -n DEV 1${reset} Network device I/O: packets and throughput
9.  ${bold}${green}sar -n TCP,ETCP 1${reset} TCP statistics: connection rates, retransmits.
10. ${bold}${green}top${reset} Check overview

EOF
setup_colors
msg "$MESSAGE\n"
e_note "For interactive creative work, network latency to remote system should
        be under 20ms (1 ms is 1 foot of sound delay)"

