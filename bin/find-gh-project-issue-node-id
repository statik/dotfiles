#!/usr/bin/env bash

# nice script boilerplate from https://betterdev.blog/minimal-safe-bash-script-template/
set -Eeuo pipefail

tempfile=$(mktemp background.XXX)
trap cleanup SIGINT SIGTERM ERR EXIT

# shellcheck disable=SC2034  # Unused variable left for future convenience
script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  rm -rf "${tempfile}"
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    # shellcheck disable=SC2034  # Unused variables left on purpose
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

# red='\033[0;31m'
# yellow='\033[0;33m'
# clear='\033[0m'

bold=$(tput bold)
underline=$(tput sgr 0 1)
reset=$(tput sgr0)

purple=$(tput setaf 171)
red=$(tput setaf 1)
green=$(tput setaf 76)
tan=$(tput setaf 3)
blue=$(tput setaf 38)

msg() {
  echo >&2 -e "${1-}"
}

define() { IFS=$'\n' read -r -d '' "${1}" || true; }

#
# Headers and  Logging
#

e_header() {
  printf "\n${bold}${purple}==========  %s  ==========${reset}\n" "$@"
}
e_arrow() {
  printf "➜ $@\n"
}
e_success() {
  printf "${green}✔ %s${reset}\n" "$@"
}
echo
e_error() {
  printf "${red}✖ %s${reset}\n" "$@" 1>&2
}
e_warning() {
  printf "${tan}➜ %s${reset}\n" "$@" 1>&2
}
e_underline() {
  printf "${underline}${bold}%s${reset}\n" "$@"
}
e_bold() {
  printf "${bold}%s${reset}\n" "$@"
}
e_note() {
  printf "${underline}${bold}${blue}Note:${reset}  ${blue}%s${reset}\n" "$@"
}

function usage() {
  e_note "$DESCRIPTION"
  e_bold "$USAGE"
}

USAGE="Usage: $(basename "$0") <${bold}${red}project number${reset}> <${bold}${red}issue number${reset}>"
DESCRIPTION="Find the ${bold}${green}node ID${reset} of a GitHub projectsV2 issue"

function check_requirements() {
  setup_colors

  type gh >/dev/null 2>&1 || {
    e_error "Error: github cli must be installed (try brew install gh)"
    usage
    exit 1
  }

  type jq >/dev/null 2>&1 || {
    e_error "Error: jq cli must be installed (try brew install jq)"
    usage
    exit 1
  }

  [ $# -eq 2 ] || {
    e_error "Error: expected 2 arguments, got $#"
    usage
    exit 1
  }
}

function main() {
  check_requirements "$@"

  exit 0
}

main "$@"
